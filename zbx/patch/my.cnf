#
# This group is read both by the client and the server
# use it for options that affect everything
#
[client-server]

#
# include *.cnf from the config directory
#
# !includedir /etc/my.cnf.d

[mysqld]
# log-error=/var/log/mariadb.log
event_scheduler                = ON

default-time_zone              = '+8:00'
# InnoDB存储引擎的缓冲池大小，这是InnoDB用于缓存数据和索引的地方。
innodb_buffer_pool_size        = 1024M
# InnoDB存储引擎的日志缓冲区大小。
innodb_log_buffer_size         = 16M
# 用于存储键值对的内存大小。
key_buffer_size                = 128M
# 临时表的内存大小。
tmp_table_size                 = 128M
# 这是查询缓存的大小，可以加快查询的速度。
# 但是，如果数据经常更新，这个缓存可能会造成问题，因为它可能会存储过时的数据。
query_cache_size               = 256M
# 可以在执行SELECT语句时跳过锁定，从而提高SELECT语句的性能。
# 这个特性对于对性能要求较高的应用程序非常有用。
# skip-locking
# 用于禁止MySQL对外部连接进行DNS解析。这个选项通常用于优化MySQL的性能，
# 因为DNS解析是造成数据库延迟的一个常见原因。
skip-name-resolve
# 网络传输的最大包大小
max_allowed_packet             = 256M
# 线程缓存的大小
thread_cache_size              = 256
table_open_cache               = 4096
# 这个参数定义了MySQL服务器可以处理的最大连接数。
back_log                       = 1024
max_connect_errors             = 100000
# 交互式连接的超时时间
interactive_timeout            = 1800
# 非交互式连接的超时时
wait_timeout                   = 1800
# 定义了等待锁的持续时间，单位是秒。
# 如果在持有行锁的过程中有其他事务想要修改锁定行的数据，需要等待锁的释放。
lock_wait_timeout              = 1800
# 这个参数定义了MySQL服务器可以接受的并发连接的最大数量。
max_connections                = 2048
sort_buffer_size               = 16M
join_buffer_size               = 4M
read_buffer_size               = 4M
read_rnd_buffer_size           = 16M
binlog_cache_size              = 2M
thread_stack                   = 192K
# 内存表的的最大大小。
max_heap_table_size            = 128M
# MyISAM存储引擎排序缓冲区的大小。
myisam_sort_buffer_size        = 128M
bulk_insert_buffer_size        = 256M
open_files_limit               = 655350
query_cache_limit              = 2M
slow-query-log                 
long_query_time                = 2
# 二进制日志的过期时间。
expire_logs_days               = 3
# 二进制日志的最大大小。
max_binlog_size                = 1000M
# 在复制过程中并行处理的工作数
slave_parallel_workers         = 4
# 是否记录从服务器的更新。
log-slave-updates
# 复制进程忽略名为"mysql"的数据库
binlog_ignore_db               = mysql
# 复制进程忽略所有以"mysql."开头的表。
replicate_wild_ignore_table    = mysql.%
# 表示每次提交事务时，MySQL都会将binlog刷新到磁盘。
# 保证数据的强一致性，但会牺牲一定的性能。
sync_binlog                    = 1
# 每个表都会使用单独的表空间。这种设置有助于提高性能和并发性，
# 因为每个表的空间使用情况可以独立进行优化。
# 此外，如果某个表的数据量非常大，使用单独的表空间可以避免其他表受到磁盘空间的限制。
innodb_file_per_table          = 1
# InnoDB存储引擎每个表使用一个文件的刷新方法
# InnoDB 将会尝试使用一个更直接的方法来刷新数据和重做日志，
# 这种方法通常会使用 DMA（Direct Memory Access）通道。
# 使用 DMA 通道可以避免在操作系统和硬件之间复制数据，从而提高性能。
innodb_flush_method            = O_DIRECT
# InnoDB 使用一个称为缓冲池（Buffer Pool）的内存区域来存储最近访问的数据和索引。
# 通过将常用的数据和索引存储在内存中，可以减少磁盘 I/O 操作，从而提高性能。
innodb_buffer_pool_instances   = 4
# InnoDB 使用日志文件来记录所有的事务操作和数据修改操作。
# 这个日志文件通常被称为 InnoDB 日志文件（InnoDB Log File）。
# 通过将事务操作和数据修改操作记录在日志文件中，InnoDB 可以保证数据的一致性和完整性，
# 并且可以在数据库崩溃后恢复数据。
innodb_log_file_size           = 512M
# InnoDB 使用多个日志文件来记录所有的事务操作和数据修改操作。
# 这些日志文件通常被称为 InnoDB 日志文件组（InnoDB Log File Group）。
# 通过将事务操作和数据修改操作分散记录在多个日志文件中，InnoDB 可以提供更好的并发性能和恢复能力。
innodb_log_files_in_group      = 3
# InnoDB 使用文件来存储数据和索引。当需要访问某个表的数据或索引时，
# InnoDB 会打开相应的文件并读取数据。
innodb_open_files              = 4000
# 用于定义同时进行的 InnoDB 读取操作的线程数量。
innodb_read_io_threads         = 8
# 用于定义同时进行的 InnoDB 写入操作的线程数量。
innodb_write_io_threads        = 8
# 用于定义并发线程的最大数量。
innodb_thread_concurrency      = 8
# 用于定义 InnoDB 磁盘 I/O 能力的最大值。
innodb_io_capacity             = 2000
# 用于定义 InnoDB 磁盘 I/O 能力的最大上限值。
innodb_io_capacity_max         = 6000
# 定义 InnoDB 最近使用记录（LRU）算法的扫描深度。
innodb_lru_scan_depth          = 2000
# 用于定义 InnoDB 缓冲池中最大脏页比例。
# 当一个数据页被修改后，它被称为脏页（dirty page）
innodb_max_dirty_pages_pct     = 85
# 用于定义 InnoDB 日志刷新方式。InnoDB 将会先将日志写入到内存中的缓冲区，
# 然后根据操作系统的调度和磁盘 I/O 操作情况，异步地将日志刷新到磁盘。
innodb_flush_log_at_trx_commit = 2

[client]
user=root

